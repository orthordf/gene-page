extends ../layout

block head
  script(src="https://cdn.plot.ly/plotly-2.18.2.min.js")
  script(src=pathFromRoot("/javascripts/sortable.js"))

block content
  h2=`${symbol}: ${description}`
  table(border=1)
    thead(align='left')
      each header in Object.keys(geneInfo)
        th=header
    tbody
      each header in Object.keys(geneInfo)
        td
          each content in geneInfo[header] ? geneInfo[header].toString().split('|') : []
            =content
            br
  span Go to <a href=https://www.ncbi.nlm.nih.gov/gene/#{id}>NCBI</a>, go to <a href=https://en.wikipedia.org/wiki/#{symbol}>Wikipedia</a>

  h3 RefSeq
  table(border=1)
    thead(align='left')
      tr
        th='Status'
        th='RefSeq protein ID'
        th='RefSeq RNA ID'
    tbody
      each status in Object.keys(refseqStatusTable).sort()
        each rnaVersion in Object.keys(refseqStatusTable[status]).sort()
          each proteinVersion in Array.from(refseqStatusTable[status][rnaVersion])
            tr
              td=status
              td=proteinVersion
              td=rnaVersion

  h3=`HomoloGene: ${geneInfo.group_id}`
  table(border=1)
    thead(align='left')
      tr
        th='Gene ID'
        th='Gene symbol'
        th='RefSeq'
        th='TaxID'
        th='Scientific name'
        th='Common name'
        th='Comment'
        th='Wikidata'
    tbody
      each homologene in homologenes
        tr
          td=homologene.id
          td=homologene.symbol
          td=homologene.protein_id
          td
            a(href=`https://orth.dbcls.jp/taxid/${homologene.tax_id}`)=homologene.tax_id
          td=homologene.Species.scientific_name
          td=homologene.Species.common_name
          td=homologene.Species.comment
          td
            a(href=homologene.Species.wikidata_url, target='_blank' rel='noopener noreferrer')
              if homologene.Species.wikidata_thumbnail_url
                img.species-thumbnail(src=`${homologene.Species.wikidata_thumbnail_url}?height=25`)
              else
                ="Wikidata"



  if blastScores !== null
    // Add search box on the top of the table
    h3#blast-title=`BLAST`
      div.blast-plot
    input(type='text', id='blast-search-box', placeholder='Filter', style="width: 300px; margin-bottom: 10px;")
    br
    table(border=1, id='blast-table').sortable
      thead
        tr
          th
            button='Score'
            span(aria-hidden='true')
          th
            button='Query'
            span(aria-hidden='true')
          th
            button='Target'
            span(aria-hidden='true')
          th
            button='Target organism'
            span(aria-hidden='true')
          th
            button='Target symbol'
            span(aria-hidden='true')
          th
            button='Target gene'
            span(aria-hidden='true')
          th
            button='Homologene'
            span(aria-hidden='true')
          th
            button='Score / Best_score(Target->human)'
            span(aria-hidden='true')
          th
            button='Human seq for Best_score(Target->human)'
            span(aria-hidden='true')
      tbody
        each blastScore, index in blastScores
          tr(data-index=index)
            td=blastScore.score
            td=blastScore.query
            td=blastScore.target
            td=blastSpecies[blastScore.speciesIndex - 1]
            if blastScore.speciesIndex == 1
              // human
              td
                a(href=pathFromRoot(`genes/${blastScore.targetGeneID}`)).gene-link
                  =blastScore.targetSymbol
            else
              td=blastScore.targetSymbol
            td
              if blastScore.targetGeneID !== null
                a(href=`https://www.ncbi.nlm.nih.gov/gene/${blastScore.targetGeneID}`)
                  =blastScore.targetGeneID
            td
              if blastScore.targetGroupID
                a(href=`https://www.ncbi.nlm.nih.gov/gene/${blastScore.targetGroupID}`)
                  =blastScore.targetGroupID
            td=blastScore.ratio
            td
              if blastScore.reverseBests
                each reverseBest in blastScore.reverseBests
                  a(href=`https://www.ncbi.nlm.nih.gov/protein/${reverseBest}`)
                    =reverseBest
                  if reverseBestsDict[reverseBest]
                    =`(${reverseBestsDict[reverseBest]})`
                  =' '

block script
  if blastScores !== null
    script.
      let blastPlot = document.querySelector('.blast-plot');
      let blastScores = !{JSON.stringify(blastScores)}

      const blastSpecies = !{JSON.stringify(blastSpecies)}

      const defaultPlotSize = 8;

      Plotly.newPlot( blastPlot, [
          {
            x: blastScores.map(s => s.speciesIndex - 1),
            y: blastScores.map(s => s.score),
            mode: 'markers',
            type: 'scatter',
            marker: {
              color: blastScores.map(s => (s.isBBH ? 'red' : 'black')),
              size: blastScores.map(_ => defaultPlotSize),
            }
          }
        ],
        {
          xaxis: {
            tickvals: [...Array(blastSpecies.length).keys()],
            ticktext: blastSpecies,
            tickangle: -90,
            zeroline: false,
            range: [-1, blastSpecies.length - 1]
          },
          yaxis: {
            title: "BLAST score"
          }
        },
      );

      let blastSearchBox = document.querySelector('#blast-search-box');

      let urlParams = new URLSearchParams(window.location.search);
      let filter = urlParams.get('filter');
      if(filter) {
        blastSearchBox.value = filter;
        filterBlastTable();
      }

      function filterBlastTable() {
        let query = blastSearchBox.value.toLowerCase();
        let blastTable = document.querySelector('#blast-table');
        let blastTableRows = blastTable.querySelectorAll('tbody tr');
        blastTableRows.forEach(function(row) {
          let matched = false;
          let cells = row.querySelectorAll('td');
          cells.forEach(function(cell) {
            if(cell.textContent.toLowerCase().indexOf(query) > -1) {
              matched = true;
            }
          });

          if(matched) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      }

      blastSearchBox.addEventListener('keyup', filterBlastTable);

      let targetGeneLinks = document.querySelectorAll('.gene-link');
      targetGeneLinks.forEach(function(link) {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          let targetURL = link.getAttribute('href');
          let currentFilter = blastSearchBox.value;
          window.location.href = targetURL + '?filter=' + currentFilter + '#blast-title';
        });
      });

      // Highlight row in table when plot in plotly is hovered
      blastPlot.on('plotly_hover', function(data){
        let blastTable = document.querySelector('#blast-table');
        let blastTableRows = blastTable.querySelectorAll('tbody tr');
        blastTableRows.forEach(function(row) {
          row.style.backgroundColor = '';
        });
        blastTableRows[data.points[0].pointNumber].style.backgroundColor = '#f2f2f2';
      });

      let query = blastSearchBox.value.toLowerCase();
      // Highlight plot in plotly when table row is hovered
      document.querySelector('#blast-table').querySelectorAll('tbody tr').forEach(function(row) {
        row.addEventListener('mouseover', function(e) {
          let blastPlot = document.querySelector('.blast-plot');
          let blastPlotData = blastPlot.data[0];
          let rowIndex = row.dataset.index;
          blastPlotData.marker.color = blastPlotData.marker.color.map(function(color, index) {
            if(index == rowIndex) {
              return 'blue';
            } else if(blastScores[index].isBBH) {
              return 'red';
            } else {
              return 'black';
            }
          });

          // Change size of highlighted marker in plotly
          blastPlotData.marker.size = blastPlotData.x.map(function(x, index) {
            if(index == rowIndex) {
              return defaultPlotSize * 2;
            } else {
              return defaultPlotSize;
            }
          });
          row.style.backgroundColor = '#f2f2f2';

          Plotly.redraw(blastPlot);
        });
        row.addEventListener('mouseout', function(e) {
          let blastPlot = document.querySelector('.blast-plot');
          let blastPlotData = blastPlot.data[0];
          blastPlotData.marker.color = blastPlotData.marker.color.map(function(color, index) {
            if(blastScores[index].isBBH) {
              return 'red';
            } else {
              return 'black';
            }
          });
          blastPlotData.marker.size = blastScores.map(_ => defaultPlotSize);
          Plotly.redraw(blastPlot);
          row.style.backgroundColor = '';
        });
      });

