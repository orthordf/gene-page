extends ../layout

block head
  script(src="https://cdn.plot.ly/plotly-2.18.2.min.js")
  script(src=pathFromRoot("/javascripts/sortable.js"))

block content
  div.container
    div.sticky-header
      h2.header=`${symbol}: ${description}`
    a(href=pathFromRoot('/genes')) Human genes
    ='  '
    span(style='margin-left: 15px;')
      include includes/search-area.pug
    br
    br
    table(border=1)
      thead(align='left')
        tr
          th="GeneID"
          th="Symbol"
          th="Synonyms"
          th="dbXrefs"
          th="chromosome"
          th="map location"
          th="description"
          th="type of gene"
          th.symbol-cell="Symbol from nomenclature authority"
          th="Full name from nomenclature authority"
          th="Nomenclature status"
          th="Other designations"
          th="Modification date"
          th="Feature type"
      tbody
        tr
          td=geneInfo.id
          td=geneInfo.symbol
          td
            if geneInfo.synonyms
              each synonym in geneInfo.synonyms.split('|')
                =synonym
                br
          td
            if geneInfo.dbXrefs
              each xref in geneInfo.dbXrefs.split('|')
                =xref
                br
          td=geneInfo.chromosome
          td=geneInfo.map_location
          td
            if geneInfo.description
              each desc in geneInfo.description.split('|')
                =desc
                br
          td=geneInfo.type_of_gene
          td=geneInfo.symbol_from_nomenclature_authority
          td=geneInfo.full_name_from_nomenclature_authority
          td=geneInfo.nomenclature_status
          td
            if geneInfo.other_designations
              each d in geneInfo.other_designations.split('|')
                =d
                br
          td=geneInfo.modification_date
          td=geneInfo.feature_type
    span.text-small Go to <a href=https://www.ncbi.nlm.nih.gov/gene/#{id} target='_blank'>NCBI</a>, go to <a href=https://en.wikipedia.org/wiki/#{symbol} target='_blank'>Wikipedia</a>

    h3 RefSeq
    table(border=1)
      thead(align='left')
        tr
          th='Status'
          th='RefSeq protein ID'
          th='RefSeq RNA ID'
      tbody
        each status in Object.keys(refseqStatusTable).sort()
          each rnaVersion in Object.keys(refseqStatusTable[status]).sort()
            each proteinVersion in Array.from(refseqStatusTable[status][rnaVersion])
              tr
                td=status
                td=proteinVersion
                td=rnaVersion

    h3=`HomoloGene: ${geneInfo.group_id ? geneInfo.group_id : ''}`
    table(border=1)
      thead(align='left')
        tr
          th='Gene ID'
          th='Gene symbol'
          th='RefSeq'
          th='TaxID'
          th='Scientific name'
          th='Common name'
          th='Comment'
          th='Wikidata'
      tbody
        each homologene in homologenes
          tr
            td=homologene.id
            td=homologene.symbol
            td=homologene.protein_id
            td
              a(href=`https://orth.dbcls.jp/taxid/${homologene.tax_id}`)=homologene.tax_id
            td=homologene.Species.scientific_name
            td=homologene.Species.common_name
            td=homologene.Species.comment
            td
              a(href=homologene.Species.wikidata_url, target='_blank' rel='noopener noreferrer')
                if homologene.Species.wikidata_thumbnail_url
                  img.species-thumbnail(src=`${homologene.Species.wikidata_thumbnail_url}?height=25`)
                else
                  ="Wikidata"



    if blastScores !== null
      // Add search box on the top of the table
      h3#blast-title=`BLAST`
      table(border=1)
        thead
          tr
            th='BLAST scores'
            th='Homologene profile'
        tbody
          tr
            td
              div.blast-plot
            td
              each s in species
                if s.isHomologene
                  ='*'
                =s.common_name
                br
      br
      input(type='text', id='blast-search-box', placeholder='Filter', style="width: 300px; margin-bottom: 10px;")
      br
      table(border=1, id='blast-table').sortable
        thead
          tr
            th.num
              button='Score'
              span(aria-hidden='true')
            th
              button='Query'
              span(aria-hidden='true')
            th
              button='Target'
              span(aria-hidden='true')
            th
              button='Target organism'
              span(aria-hidden='true')
            th
              button='Target symbol'
              span(aria-hidden='true')
            th
              button='Target gene'
              span(aria-hidden='true')
            th
              button='Homologene'
              span(aria-hidden='true')
            th.num
              button='Score / Best_score (Target → human)'
              span(aria-hidden='true')
            th
              button='Human seq for Best_score (Target → human)'
              span(aria-hidden='true')
        tbody
          each blastScore, index in blastScores
            tr(data-index=index)
              td=blastScore.score
              td=blastScore.query
              td=blastScore.target
              td=blastSpecies[blastScore.speciesIndex - 1]
              if blastScore.speciesIndex == 1
                // human
                td
                  a(href=pathFromRoot(`genes/${blastScore.targetGeneID}#blast-title`)).gene-link
                    =blastScore.targetSymbol
              else
                td=blastScore.targetSymbol
              td
                if blastScore.targetGeneID !== null
                  a(href=`https://www.ncbi.nlm.nih.gov/gene/${blastScore.targetGeneID}`)
                    =blastScore.targetGeneID
              td
                if blastScore.targetGroupID
                  a(href=`https://www.ncbi.nlm.nih.gov/gene/${blastScore.targetGroupID}`)
                    =blastScore.targetGroupID
              td=blastScore.ratio
              td
                if blastScore.reverseBests
                  each reverseBest in blastScore.reverseBests
                    a(href=`https://www.ncbi.nlm.nih.gov/protein/${reverseBest}`)
                      =reverseBest
                    if reverseBestsDict[reverseBest]
                      =`(${reverseBestsDict[reverseBest]})`
                    =' '

block script
  if blastScores !== null
    script.
      // Initialize sortable table buttons
      let sortableTables = document.querySelectorAll('table.sortable');
      for(let i = 0; i < sortableTables.length; i++) {
        new SortableTable(sortableTables[i]);
      }
      let blastPlot = document.querySelector('.blast-plot');
      let blastScores = !{JSON.stringify(blastScores)}

      const blastSpecies = !{JSON.stringify(blastSpecies)}

      const defaultPlotSize = 8;
      let plotData =
        {
          x: blastScores.map(s => s.speciesIndex - 1),
          y: blastScores.map(s => s.score),
          text: blastScores.map(s => s.targetSymbol),
          mode: 'markers',
          type: 'scatter',
          hoverInfo: 'text',
          marker: {
            color: blastScores.map(s => (s.isBBH ? 'red' : 'black')),
            size: blastScores.map(_ => defaultPlotSize),
          }
        };


      Plotly.newPlot( blastPlot, [plotData],
        {
          xaxis: {
            tickvals: [...Array(blastSpecies.length).keys()],
            ticktext: blastSpecies,
            tickangle: -90,
            // show tick bar
            ticklen: 8,
            tickwidth: 1,
            showticklabels: true,
            zeroline: false,
            linecolor: 'black',
            mirror: true,
            range: [-1, blastSpecies.length - 1]
          },
          yaxis: {
            title: "BLAST score",
            range: [1, Math.max(...blastScores.map(s => parseFloat(s.score))) * 1.1], // 1.1 is for margin
            linecolor: 'black',
            ticklen: 8,
            mirror: true,
          },

          margin: {
            l: 100,
            r: 100,
            b: 100,
            t: 50,
            pad: 4
          }
        },
        {
          // scrollZoom: true,
          // hide buttons
          modeBarButtonsToRemove: [
            'zoom2d',
            'pan2d',
            'select2d',
            'lasso2d',
            'zoomIn2d',
            'zoomOut2d',
            'autoScale2d',
            // 'resetScale2d',
          ],
          displaylogo: false,
          toImageButtonOptions: {
            format: 'png',
            filename: `gene_!{geneInfo.id}`,
          }
        }
      );

      let blastSearchBox = document.querySelector('#blast-search-box');

      let urlParams = new URLSearchParams(window.location.search);
      let anchor = urlParams.get('anchor');
      if(anchor !== 'blast-title')
        sessionStorage.removeItem('blastFilter');
      let filter = sessionStorage.getItem('blastFilter');
      if(filter) {
        blastSearchBox.value = filter;
        filterBlastTable();
      }
      function filterBlastTable() {
        let query = blastSearchBox.value.toLowerCase();
        let blastTable = document.querySelector('#blast-table');
        let blastTableRows = blastTable.querySelectorAll('tbody tr');
        blastTableRows.forEach(function(row) {
          let matched = false;
          let cells = row.querySelectorAll('td');
          cells.forEach(function(cell) {
            if(cell.textContent.toLowerCase().indexOf(query) > -1) {
              matched = true;
            }
          });

          if(matched) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
        sessionStorage.setItem('blastFilter', query);
      }

      blastSearchBox.addEventListener('keyup', filterBlastTable);

      // Highlight row in table when plot in plotly is hovered
      blastPlot.on('plotly_hover', function(data){
        let blastTable = document.querySelector('#blast-table');
        let blastTableRows = blastTable.querySelectorAll('tbody tr');
        let index = data.points[0].pointNumber;
        blastTableRows.forEach(function(row) {
          if(row.dataset.index != index)
            row.style.backgroundColor = '';
          else
            row.style.backgroundColor = '#f2f2f2';
        });

        let updateData = {};
        updateData[`marker.color[${index}]`] = 'blue';
        updateData[`marker.size[${index}]`] = defaultPlotSize * 2;
        Plotly.update(blastPlot, updateData);
      });

      // Unhighlight plot when unhovered
      blastPlot.on('plotly_unhover', function(data){
        let index = data.points[0].pointNumber;
        let updateData = {};
        updateData[`marker.color[${index}]`] = blastScores[index].isBBH ? 'red' : 'black';
        updateData[`marker.size[${index}]`] = defaultPlotSize;
        Plotly.update(blastPlot, updateData);
      });


      let query = blastSearchBox.value.toLowerCase();
      // Highlight plot in plotly when table row is hovered
      document.querySelector('#blast-table').querySelectorAll('tbody tr').forEach(function(row) {
        let rowIndex = row.dataset.index;
        row.addEventListener('mouseover', function(e) {
          let updateData = {};
          updateData[`marker.color[${rowIndex}]`] = 'blue';
          updateData[`marker.size[${rowIndex}]`] = defaultPlotSize * 2;
          Plotly.update(blastPlot, updateData);

          row.style.backgroundColor = '#f2f2f2';
        });
        row.addEventListener('mouseout', function(e) {
          let updateData = {};
          updateData[`marker.color[${rowIndex}]`] = blastScores[rowIndex].isBBH ? 'red' : 'black';
          updateData[`marker.size[${rowIndex}]`] = defaultPlotSize;
          Plotly.update(blastPlot, updateData);
          row.style.backgroundColor = '';
        });
      });

