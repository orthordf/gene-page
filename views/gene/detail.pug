extends ../layout

block head
  script(src="https://cdn.plot.ly/plotly-2.18.2.min.js")

block content
  h2=`${symbol}: ${description}`
  table(border=1)
    thead(align='left')
      each header in Object.keys(geneInfo)
        th=header
    tbody
      each header in Object.keys(geneInfo)
        td
          each content in geneInfo[header].toString().split('|')
            =content
            br
  span Go to <a href=https://www.ncbi.nlm.nih.gov/gene/#{id}>NCBI</a>, go to <a href=https://en.wikipedia.org/wiki/#{symbol}>Wikipedia</a>

  h3 RefSeq
  table(border=1)
    thead(align='left')
      tr
        th='Status'
        th='RefSeq protein ID'
        th='RefSeq RNA ID'
    tbody
      each status in Object.keys(refseqStatusTable).sort()
        each rnaVersion in Object.keys(refseqStatusTable[status]).sort()
          each proteinVersion in Array.from(refseqStatusTable[status][rnaVersion])
            tr
              td=status
              td=proteinVersion
              td=rnaVersion

  h3=`HomoloGene: ${geneInfo.group_id}`
  table(border=1)
    thead(align='left')
      tr
        th='Gene ID'
        th='Gene symbol'
        th='RefSeq'
        th='TaxID'
        th='Scientific name'
        th='Common name'
        th='Comment'
        th='Wikidata'
    tbody
      each homologene in homologenes
        tr
          td=homologene.id
          td=homologene.symbol
          td=homologene.protein_id
          td
            a(href=`https://orth.dbcls.jp/taxid/${homologene.tax_id}`)=homologene.tax_id
          td=homologene.Species.scientific_name
          td=homologene.Species.common_name
          td=homologene.Species.comment
          td
            a(href=homologene.Species.wikidata_url, target='_blank' rel='noopener noreferrer')
              if homologene.Species.wikidata_thumbnail_url
                img.species-thumbnail(src=`${homologene.Species.wikidata_thumbnail_url}?height=25`)
              else
                ="Wikidata"



  if blastScores !== null
    h3=`BLAST`
      div.blast-plot
    table(border=1)
      thead
        tr
          th='Score'
          th='Query'
          th='Target'
          th='Target organism'
          th='Target symbol'
          th='Target gene'
          th='Homologene'
          th='Score / Best_score(Target->human)'
          th='Human seq for Best_score(Target->human)'
      tbody
        each blastScore in blastScores
          tr
            td=blastScore.score
            td=blastScore.query
            td=blastScore.target
            td=blastSpecies[blastScore.speciesIndex - 1]
            if blastScore.speciesIndex == 1
              // human
              td
                a(href=pathFromRoot(`genes/${blastScore.targetGeneID}`))
                  =blastScore.targetSymbol
            else
              td=blastScore.targetSymbol
            td
              if blastScore.targetGeneID !== null
                a(href=`https://www.ncbi.nlm.nih.gov/gene/${blastScore.targetGeneID}`)
                  =blastScore.targetGeneID
            td
              if blastScore.targetGroupID
                a(href=`https://www.ncbi.nlm.nih.gov/gene/${blastScore.targetGroupID}`)
                  =blastScore.targetGroupID
            td=blastScore.ratio
            td
              if blastScore.reverseBests
                each reverseBest in blastScore.reverseBests
                  a(href=`https://www.ncbi.nlm.nih.gov/protein/${reverseBest}`)
                    =reverseBest
                  if reverseBestsDict[reverseBest]
                    =`(${reverseBestsDict[reverseBest]})`
                  =' '

block script
  if blastScores !== null
    script.
      let blastPlot = document.querySelector('.blast-plot');
      let blastScores = !{JSON.stringify(blastScores)}

      const blastSpecies = !{JSON.stringify(blastSpecies)}

      Plotly.newPlot( blastPlot, [
          {
            x: blastScores.map(s => s.speciesIndex - 1),
            y: blastScores.map(s => s.score),
            mode: 'markers',
            type: 'scatter',
            marker: {
              color: blastScores.map(s => (s.isBBH ? 'red' : 'black'))
            }
          }
        ],
        {
          xaxis: {
            tickvals: [...Array(blastSpecies.length).keys()],
            ticktext: blastSpecies,
            tickangle: -90,
            zeroline: false,
            range: [-1, blastSpecies.length - 1]
          },
          yaxis: {
            title: "BLAST score"
          }
        },
      );